from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import os
import glob
import re
import sys
import urllib
import tarfile
import zipfile
import os.path as osp
from scipy.io import loadmat
import numpy as np
import h5py
from scipy.misc import imsave

from torchreid.utils.iotools import mkdir_if_missing


class DukeMTMCreID(object):
    """
    DukeMTMC-reID

    Reference:
    1. Ristani et al. Performance Measures and a Data Set for Multi-Target, Multi-Camera Tracking. ECCVW 2016.
    2. Zheng et al. Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro. ICCV 2017.

    URL: https://github.com/layumi/DukeMTMC-reID_evaluation
    
    Dataset statistics:
    # identities: 1404 (train + query)
    # images:16522 (train) + 2228 (query) + 17661 (gallery)
    # cameras: 8
    """
    dataset_dir = 'dukemtmc-reid'

    def __init__(self, root='data', verbose=True,random_label=1,self_attribute_path=None,attribute_path_bin=None,
                 attribute_path=None,arch=None,is_frame=False,test_attribute_path=None,**kwargs):



        super(DukeMTMCreID, self).__init__()
        self.dataset_dir = osp.join(root, self.dataset_dir)
        self.dataset_url = 'http://vision.cs.duke.edu/DukeMTMC/data/misc/DukeMTMC-reID.zip'
        self.train_dir = osp.join(self.dataset_dir, 'DukeMTMC-reID/bounding_box_train')
        self.query_dir = osp.join(self.dataset_dir, 'DukeMTMC-reID/query')
        self.gallery_dir = osp.join(self.dataset_dir, 'DukeMTMC-reID/bounding_box_test')



        self._download_data()
        self._check_before_run()

        attribute_data, attribute_data_self, attribute_data_bin = None, None, None

        self.from_att_to_ID_test = {}

        attribute_data, attribute_data_self, attribute_data_bin = None, None, None

        if attribute_path is not None:
            attribute_data = np.load(attribute_path).item()

        if test_attribute_path is not None:
            test_attribute_data = np.load(test_attribute_path).item()

        if self_attribute_path is not None:
            attribute_data_self = np.load(self_attribute_path).item()

        if attribute_path_bin is not None:
            attribute_data_bin = np.load(attribute_path_bin).item()



        train, num_train_pids, num_train_imgs = self._process_dir(self.train_dir, relabel=True,
                                                                  attribute_data=attribute_data,\
                                                                  attribute_data_self=attribute_data_self,\
                                                                  attribute_data_bin=attribute_data_bin,
                                                                  arch=arch,is_frame=is_frame)

        if arch=='resnetAttW2VAttributes':
            query, num_query_pids, num_query_imgs = self._process_dir(self.query_dir,relabel=False,\
                                                                  attribute_data=test_attribute_data,\
                                                                  attribute_data_self=attribute_data_self,\
                                                                  attribute_data_bin=attribute_data_bin,
                                                                  arch=arch,from_att_to_ID=self.from_att_to_ID_test,
                                                                  is_frame=is_frame)


            gallery, num_gallery_pids, num_gallery_imgs =self._process_dir(self.gallery_dir,relabel=False,\
                                                                  attribute_data=test_attribute_data,\
                                                                  attribute_data_self=attribute_data_self,\
                                                                  attribute_data_bin=attribute_data_bin,
                                                                  arch=arch,from_att_to_ID=self.from_att_to_ID_test,
                                                                  is_frame =is_frame)

        else:
            query, num_query_pids, num_query_imgs = self._process_dir(self.query_dir, relabel=False, \
                                                                      attribute_data=test_attribute_data, \
                                                                      attribute_data_self=test_attribute_data, \
                                                                      attribute_data_bin=attribute_data_bin,
                                                                      arch=arch,
                                                                      from_att_to_ID=self.from_att_to_ID_test,
                                                                      is_frame =False)


            gallery, num_gallery_pids, num_gallery_imgs = self._process_dir(self.gallery_dir, relabel=False, \
                                                                            attribute_data=test_attribute_data, \
                                                                            attribute_data_self=test_attribute_data, \
                                                                            attribute_data_bin=attribute_data_bin,
                                                                            arch=arch,
                                                                            from_att_to_ID=self.from_att_to_ID_test,
                                                                            is_frame =False)



        num_total_pids = num_train_pids + num_query_pids
        num_total_imgs = num_train_imgs + num_query_imgs + num_gallery_imgs

        if verbose:
            print("=> DukeMTMC-reID loaded")
            print("Dataset statistics:")
            print("  ------------------------------")
            print("  subset   | # ids | # images")
            print("  ------------------------------")
            print("  train    | {:5d} | {:8d}".format(num_train_pids, num_train_imgs))
            print("  query    | {:5d} | {:8d}".format(num_query_pids, num_query_imgs))
            print("  gallery  | {:5d} | {:8d}".format(num_gallery_pids, num_gallery_imgs))
            print("  ------------------------------")
            print("  total    | {:5d} | {:8d}".format(num_total_pids, num_total_imgs))
            print("  ------------------------------")

        self.train = train
        self.query = query
        self.gallery = gallery

        self.num_train_pids = num_train_pids
        self.num_query_pids = num_query_pids
        self.num_gallery_pids = num_gallery_pids

    def _download_data(self):
        if osp.exists(self.dataset_dir):
            print("This dataset has been downloaded.")
            return

        print("Creating directory {}".format(self.dataset_dir))
        mkdir_if_missing(self.dataset_dir)
        fpath = osp.join(self.dataset_dir, osp.basename(self.dataset_url))

        print("Downloading DukeMTMC-reID dataset")
        urllib.urlretrieve(self.dataset_url, fpath)

        print("Extracting files")
        zip_ref = zipfile.ZipFile(fpath, 'r')
        zip_ref.extractall(self.dataset_dir)
        zip_ref.close()

    def _check_before_run(self):
        """Check if all files are available before going deeper"""
        if not osp.exists(self.dataset_dir):
            raise RuntimeError("'{}' is not available".format(self.dataset_dir))
        if not osp.exists(self.train_dir):
            raise RuntimeError("'{}' is not available".format(self.train_dir))
        if not osp.exists(self.query_dir):
            raise RuntimeError("'{}' is not available".format(self.query_dir))
        if not osp.exists(self.gallery_dir):
            raise RuntimeError("'{}' is not available".format(self.gallery_dir))



    def get_attributes(self, attribute_data, key):
        current_attributes = attribute_data[key]
        return current_attributes


    def _process_dir(self, dir_path, relabel=False,attribute_data=None,attribute_data_self=None,
                     attribute_data_bin=None,arch='resnet50',from_att_to_ID=None,is_frame=False):

        img_paths = glob.glob(osp.join(dir_path, '*.jpg'))
        pattern = re.compile(r'([-\d]+)_c(\d)')

        pid_container = set()
        for img_path in img_paths:
            pid, _ = map(int, pattern.search(img_path).groups())
            pid_container.add(pid)
        pid2label = {pid:label for label, pid in enumerate(pid_container)}

        dataset = []
        for img_path in img_paths:
            pid, camid = map(int, pattern.search(img_path).groups())
            assert 1 <= camid <= 8
            camid -= 1 # index starts from 0
            key = str(pid) + '_' + str(camid + 1)
            key_pid = str(pid)


            if relabel: pid = pid2label[pid]


            if arch == 'resnetAttW2VAttributes' or arch == 'resnetAttW2VText':
                if is_frame:
                    current_attributes = self.get_attributes(attribute_data, key)
                    label_attributes = self.get_attributes(attribute_data_self, key)
                else:
                    current_attributes = self.get_attributes(attribute_data, key_pid)
                    label_attributes = self.get_attributes(attribute_data_self, key_pid)
                if from_att_to_ID is not None:
                    current_attributes_bin = self.get_attributes(attribute_data_bin, key_pid)
                    kkkk = ''.join(map(str, current_attributes_bin))

                    if kkkk in from_att_to_ID.keys():
                        key_pid = from_att_to_ID[str(kkkk)]
                    else:
                        from_att_to_ID[str(kkkk)] = key_pid

                    if relabel:
                        pid = pid2label[int(key_pid)]
                    else:
                        pid = int(key_pid)


            # img_path=img_path.split('/')
            # img_path=(img_path[5]+'/'+img_path[6]+'/'+img_path[7]+'/'+img_path[8])
            # # print(img_path)
                dataset.append((tuple([img_path]), pid, camid,current_attributes,label_attributes))

        num_pids = len(pid_container)
        num_imgs = len(dataset)
        return dataset, num_pids, num_imgs
